name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

permissions:
  packages: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./MCP.Extensions

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Determine Package Version
      id: version
      run: |
        # Get latest tag that matches version pattern
        latest_tag=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)

        if [ -z "$latest_tag" ]; then
          base_version="0.0.1"
        else
          version="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          base_version="$major.$minor.$patch"
        fi

        # Add -preview unless it's a release trigger
        if [[ "${{ github.event_name }}" == "release" ]]; then
          final_version="$base_version"
        else
          final_version="$base_version-preview.${{ github.run_id }}"
        fi

        echo "PACKAGE_VERSION=$final_version" >> $GITHUB_ENV
        echo "Using version: $final_version"

    - name: Pack
      run: dotnet pack MCP.Extensions.csproj --configuration Release -p:PackageVersion=${{ env.PACKAGE_VERSION }} --no-restore --output ./nupkg

    - name: Publish to GitHub Packages
      run: |
        dotnet nuget add source --username echapmanFromBunnings --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/echapmanFromBunnings/index.json"
        dotnet nuget push ./nupkg/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    - name: Publish to NuGet.org
      run: dotnet nuget push ./nupkg/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}
      continue-on-error: true
    - name: Clean up
      run: rm -r ./nupkg
